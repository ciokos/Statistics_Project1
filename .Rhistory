#Exercise 2.1
dbinom(4,10,0.6)
pbinom(4,10,0.6)
pbinom(5,10,0.6)
#P(X<=5)
pbinom(5,10,0.6)
#P(X<5) = P(<=4)
pbinom(4,10,0.6)
#P(X=5)
dbinom(5,10,0.6)
#P(X<5) = P(<=4)
pbinom(4,10,0.6)
#P(X>4)
1-pbinom(4,10,0.6)
#P(X=5)
dbinom(5,10,0.6)
dpois(4,3)
#Exercise 2.4
dhyper(x = 0, k = 3, m = 6, n = 14, log = FALSE)
#Exercise 2.5
1-dhyper(x = 0,m = 2, n = 18, k = 3, log = FALSE)
pbinom(size = 10, prob = 0.99, log.p = FALSE, q = 0)
pbinom(size = 10, prob = 0.01, log.p = FALSE, q = 0)
pbinom(size = 10, prob = 0.1, log.p = FALSE, q = 0)
ppois(q = 5, lambda = 1.6, lower.tail = FALSE, log.p = FALSE)
ppois(q = 8, lambda = 1.6*5)
ppois(q = 19, lambda = 180/12, lower.tail = FALSE)
ppois(lambda = 180/12, q = 20:25)
#Exercise 2.9
curve(dnorm, xlim=c(-4,4))
abline(v=qnorm(0.975))
#Exercise 2.10
pnorm(q = 20, mean = 24, sd = 4)
pnorm(q = 29.5, mean = 24, sd = 4, lower.tail = FALSE)
#Exercise 2.11
pnorm(q = 10, mean = 11, sd = 5)
#Exercise 2.12
pnorm(q = 3007, mean = 3000, sd = 3, lower.tail = FALSE) + pnorm(q = 2993, mean = 3000, sd = 3)
#Exercise 2.13
ppois(q = 0, lambda = 110000/365/48)
dpois(x = 0, lambda = 110000/365/48/2)
#Exercise 2.14
plnorm(q = 30, meanlog = 3.1, sdlog = 0.15, lower.tail = FALSE)
## In RStudio the working directory is easily set via the menu
## "Session -> Set Working Directory -> To Source File Location"
## Note: In R only "/" is used for separating in paths
## (i.e. no backslash).
setwd("/Users/wojciechciok/Documents/DTU/Statistics/project1/Statistics_Project1")
## Read data from bmi1_data.csv
D <- read.table("bmi1_data.csv", header=TRUE, sep=";", as.is=TRUE)
## Dimensions of D (number of rows and columns)
dim(D)
##  Column/variable names
names(D)
## The first rows/observations
head(D)
## The last rows/observations
tail(D)
## Selected summary statistics
summary(D)
## Another type of summary of the dataset
str(D)
## Check for missing values
sum(is.na.data.frame(D))
## Calculate BMI scores and add new variable to D
D$bmi <- D$weight/(D$height/100)^2
hist(D$bmi, main = "Density Histogram of BMI", xlim = c(15,40),xlab="BMI", prob=TRUE,
las=1,
col = "green")
abline(v=median(D$bmi),col="red")
abline(v=mean(D$bmi),col="blue")
## Divide data into two subsets according to gender
Dfemale <- subset(D, gender == 0)
Dmale <- subset(D, gender == 1)
## Density histograms describing the empirical density
## of the BMI scores of women and men, respectively.
hist(Dfemale$bmi, xlab="BMI (female)", prob=TRUE)
hist(Dmale$bmi, xlab="BMI (male)", prob=TRUE)
hist(Dfemale$bmi, main = "Density Histogram of BMI for Females", xlim = c(15,40),xlab="BMI", prob=TRUE,
las=1,
col = "green")
abline(v=median(Dfemale$bmi),col="red")
abline(v=mean(Dfemale$bmi),col="blue")
hist(Dmale$bmi, main = "Density Histogram of BMI for Males", xlim = c(15,40),xlab="BMI", prob=TRUE,
las=1,
col = "green")
abline(v=median(Dmale$bmi),col="red")
abline(v=mean(Dmale$bmi),col="blue")
## Box plot of BMI scores by gender
boxplot(Dfemale$bmi, Dmale$bmi, names=c("Female", "Male"),
xlab="Gender", ylab="BMI")
Tbl <- data.frame()
Tbl[1, "Number of obs."] <- sum(!is.na(D$bmi))
Tbl[1, "Sample mean"] <- mean(D$bmi)
Tbl[1, "Sample Variance"] <- var(D$bmi)
Tbl[1, "Sample st. dev."] <- sd(D$bmi)
Tbl[1, "Lower quartile"] <- quantile(D$bmi, 0.25)
Tbl[1, "Median"] <- median(D$bmi)
Tbl[1, "Upper quartile"] <- quantile(D$bmi, 0.75)
for(i in 0:1){
Tbl[i+2, "Number of obs."] <- sum(!is.na(D$bmi[D$gender == i]))
Tbl[i+2, "Sample mean"] <- mean(D$bmi[D$gender == i])
Tbl[i+2, "Sample Variance"] <- var(D$bmi[D$gender == i])
Tbl[i+2, "Sample st. dev."] <- sd(D$bmi[D$gender == i])
Tbl[i+2, "Lower quartile"] <- quantile(D$bmi[D$gender == i], 0.25)
Tbl[i+2, "Median"] <- median(D$bmi[D$gender == i])
Tbl[i+2, "Upper quartile"] <- quantile(D$bmi[D$gender == i], 0.75)
}
row.names(Tbl) <- c("Everyone", "Women","Men")
xtable(Tbl, align = "p{1.5cm}p{1.5cm}p{1.5cm}p{1.5cm}p{1.5cm}p{1.5cm}p{1.5cm}p{1.5cm}")
## New variable 'logbmi' with log-transformed BMI
D$logbmi <- log(D$bmi)
## qq-plot of log-transformed BMI
qqnorm(D$logbmi)
qqline(D$logbmi)
## qq-plot of log-transformed BMI
qqnorm(D$logbmi)
qqline(D$logbmi)
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
## Testing hypothesis mu=log(25) for log-transformed BMI
t.test(D$logbmi, mu=log(25))
## New variable 'logbmi' with log-transformed BMI
D$logbmi <- log(D$bmi)
## qq-plot of log-transformed BMI
qqnorm(D$logbmi)
qqline(D$logbmi)
hist(D$logbmi, main = "Density Histogram of log transformed BMI", xlim = c(15,40), xlab="BMI", prob=TRUE,
las=1,
col = "green")
## New variable 'logbmi' with log-transformed BMI
D$logbmi <- log(D$bmi)
## qq-plot of log-transformed BMI
qqnorm(D$logbmi)
qqline(D$logbmi)
hist(D$logbmi, main = "Density Histogram of log transformed BMI", xlab="BMI", prob=TRUE,
las=1,
col = "green")
hist(D$logbmi, main = "Density Histogram of log transformed BMI", xlab="BMI", prob=TRUE,
las=10,
col = "green")
hist(D$logbmi, main = "Density Histogram of log transformed BMI", xlab="BMI", prob=TRUE,
las=2,
col = "green")
hist(D$logbmi, main = "Density Histogram of log transformed BMI", xlab="BMI", prob=TRUE,
las=3,
col = "green")
hist(D$logbmi, main = "Density Histogram of log transformed BMI", xlab="BMI", prob=TRUE,
las=1,
col = "green")
## New variable 'logbmi' with log-transformed BMI
D$logbmi <- log(D$bmi)
## qq-plot of log-transformed BMI
qqnorm(D$logbmi)
qqline(D$logbmi)
mean(D$logbmi)
sd(D$logbmi)
sum(D$logbmi)
length(D$logbmi)
##student-t
qt(p=0.975, df=length(D$logbmi)-1)
t.test(D$logbmi, conf.level = 0.95)
res <- t.test(D$logbmi, conf.level = 0.95)
res
res[0]
res[2]
res[4]
res[4][0]
res[4][1]
exp(res[4])
res[['statistic']]
res[['conf.int']]
res[['conf.int']][0]
res[['conf.int']][1]
res[['conf.int']][2]
##range of median BMI
exp(res[['conf.int']][1])
exp(res[['conf.int']][2])
## Testing hypothesis mu=log(25) for log-transformed BMI
t.test(D$logbmi, mu=log(25))
## Testing hypothesis mu=log(25) for log-transformed BMI
mean <- mean(D$logbm)
u0 <- log(25)
s = sd(D$logbm)
n = length(D$logbm)
tobs <- (mean-u0)/(s/sqrt(n))
tobs
pvalue <- 2*(1-pt(abs(tobs), df=n-1))
pvalue
t.test(D$logbmi, mu=log(25))
###########################################################################
## Q-Q plot for women
woman <- subset(D, gender == 0)$logbmi
qqnorm(woman)
qqline(woman)
## Q-Q plot for men
men <- subset(D, gender == 1)$logbmi
qqnorm(men)
qqline(men)
##means and sds
mean(women)
women
D
###########################################################################
## Q-Q plot for women
woman <- subset(D, gender == 0)
woman
woman$logbmi
###########################################################################
## Q-Q plot for women
women <- subset(D, gender == 0)$logbmi
qqnorm(women)
qqline(women)
## Q-Q plot for men
men <- subset(D, gender == 1)$logbmi
qqnorm(men)
qqline(men)
women
men
##means and sds
mean(women)
mean(men)
sd(women)
sd(men)
## Compute CI for mean log-BMI score
women_conf <- t.test(women, conf.level=0.95)$conf.int
men_conf <- t.test(men, conf.level=0.95)$conf.int
## "Back-transform" to get a CI for median BMI score
exp(women_conf)
exp(men_conf)
## Comparison of mean logBMI for women and men
t.test(D$logbmi[D$gender == 0], D$logbmi[D$gender == 1])
tobs <- (mw-mm)/(sqrt(sw*sw/72+sm*sm/73))
###########################################################################
## Welch t-test for comparing two (independent) samples
mw <- mean(women)
mm <- mean(men)
sw <- sd(women)
sm <- sd(men)
tobs <- (mw-mm)/(sqrt(sw*sw/72+sm*sm/73))
###########################################################################
## Welch t-test for comparing two (independent) samples
mw <- mean(women)
mm <- mean(men)
sw <- sd(women)
sm <- sd(men)
tobs <- (mw-mm)/(sqrt(sw*sw/72+sm*sm/73))
tobs
s1 <- sw*sw
s2 <- sm*sm
n1 <-length(women)
n2 <- length(men)
num <- (s1/n1+s2/n2)*(s1/n1+s2/n2)
den <- (s1/n1)*(s1/n1)/(n1-1) + (s2/n2)*(s2/n2)/(n2-1)
v <- num/den
v
pvalue <- 2*(1-pt(abs(tobs), df=v))
pvalue
## Comparison of mean logBMI for women and men
t.test(D$logbmi[D$gender == 0], D$logbmi[D$gender == 1])
## "Back-transform" to get a CI for median BMI score
exp(women_conf)
exp(men_conf)
## Computing correlations between selected variables
cor(D[,c("weight","fastfood","bmi")], use="pairwise.complete.obs")
cor(bmi, weight)
###########################################################################
## Computing correlations
bmi <- D$bmi
weight <- D$weight
fastfood <- D$fastfood
cor(bmi, weight)
cor(bmi, fastfood)
cor(weight, fastfood)
## Computing correlations between selected variables
cor(D[,c("weight","fastfood","bmi")], use="pairwise.complete.obs")
plot(bmi, weight, xlab = "bmi", ylab = "weight")
plot(bmi, fastfood, xlab = "bmi", ylab = "fastfood")
plot(weight, fastfood, xlab = "weight", ylab = "fastfood")
